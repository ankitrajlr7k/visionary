// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                String     @id @default(uuid())
  email             String     @unique
  password          String
  name              String
  chatHistory       Chat[]
  images            Image[]
  blogPosts         BlogPost[]
  comments          Comment[]
  resetToken        String?    // Add this line
  resetTokenExpiry  DateTime?  // Add this line
}

model Image {
  id          String   @id @default(uuid())
  url         String
  prompt      String   @default("") // Field to store the string used to generate the image
  isPublic    Boolean  @default(false) // Field to determine if the image is public
  generatedAt DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}


model BlogPost {
  id          String     @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime   @default(now())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  chat        Chat?      @relation(fields: [chatId], references: [id])
  chatId      String     @unique
  comments    Comment[]  
}

model Chat {
  id          String     @id @default(uuid())
  prompt      String
  response    String
  generatedAt DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  blogPost    BlogPost?   
  blogPostupdated  Boolean @default(false)
}

model Comment {
  id          String     @id @default(uuid())
  content     String
  createdAt   DateTime   @default(now())
  blogPostId  String
  blogPost    BlogPost   @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
}